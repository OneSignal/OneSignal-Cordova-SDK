name: Publish to NPM
on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - rel/**

jobs:
  publish-to-npm:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.title, 'chore: Release')

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install
        run: bun install --frozen-lockfile

      - name: Get version
        id: get_version
        run: |
          CURRENT_VERSION=$(bun -e "console.log(require('./package.json').version)")
          if git rev-parse "$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Tag $CURRENT_VERSION already exists, nothing to do"
            exit 0
          else
            echo "Tag $CURRENT_VERSION does not exist, proceeding with release creation"
          fi
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Build & Publish
        run: |
          bun run build

          VERSION='${{ steps.get_version.outputs.version }}'
          if [[ $VERSION =~ alpha ]]; then
            bun publish --tag alpha
          elif [[ $VERSION =~ beta ]]; then
            bun publish --tag beta
          else
            bun publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create release notes
        uses: actions/github-script@v8
        id: release_notes
        with:
          script: |
            // Use the PR that triggered this workflow
            const releasePr = context.payload.pull_request;
            const releaseNotes = releasePr.body.split('<!--')[0].trim();
            core.setOutput('notes', releaseNotes);

      - name: Create GitHub Release
        uses: actions/github-script@v8
        env:
          RELEASE_NOTES: ${{ steps.release_notes.outputs.notes }}
        with:
          script: |
            const notes = process.env.RELEASE_NOTES;
            const version = '${{ steps.get_version.outputs.version }}';
            const isPrerelease = /alpha|beta/i.test(version);

            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: `Release ${version}`,
              body: notes,
              draft: false,
              prerelease: isPrerelease
            });
