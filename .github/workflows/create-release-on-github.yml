name: Publish to NPM
on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - main
      - rel/**

permissions:
  id-token: write # Required for OIDC
  contents: write

jobs:
  publish-to-npm:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || (
        github.event.pull_request.merged == true &&
        contains(github.event.pull_request.title, 'chore: Release')
      )

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

        # for installation of dependencies
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          registry-url: 'https://registry.npmjs.org'

      - name: Install & Build
        run: |
          bun install --frozen-lockfile
          bun run build

        # for publishing
      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org'

      - name: Get version
        id: get_version
        run: |
          CURRENT_VERSION=$(bun -e "console.log(require('./package.json').version)")
          if git rev-parse "$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Tag $CURRENT_VERSION already exists, nothing to do"
            exit 0
          else
            echo "Tag $CURRENT_VERSION does not exist, proceeding with release creation"
          fi
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Publish
        run: |
          VERSION='${{ steps.get_version.outputs.version }}'
          # Check if version already exists on npm
          if npm view onesignal-cordova-plugin@$VERSION > /dev/null 2>&1; then
            echo "Version $VERSION already published, skipping publish"
          else
            if [[ $VERSION =~ alpha ]]; then
              npm publish --tag alpha
            elif [[ $VERSION =~ beta ]]; then
              npm publish --tag beta
            else
              npm publish
            fi
          fi

      - name: Create release notes
        uses: actions/github-script@v8
        id: release_notes
        with:
          script: |
            let releaseNotes = '';

            if (context.payload.pull_request) {
              // PR triggered: use PR body
              const releasePr = context.payload.pull_request;
              releaseNotes = releasePr.body.split('<!--')[0].trim();
            } else {
              // Workflow dispatch: find latest merged "chore: Release" PR
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed',
                sort: 'updated',
                direction: 'desc',
                per_page: 50
              });

              const releasePr = prs.data.find(pr =>
                pr.merged_at && pr.title.includes('chore: Release')
              );

              if (releasePr) {
                releaseNotes = releasePr.body.split('<!--')[0].trim();
              }
            }
            core.setOutput('notes', releaseNotes);

      - name: Create GitHub Release
        uses: actions/github-script@v8
        env:
          RELEASE_NOTES: ${{ steps.release_notes.outputs.notes }}
        with:
          script: |
            const notes = process.env.RELEASE_NOTES;
            const version = '${{ steps.get_version.outputs.version }}';
            const isPrerelease = /alpha|beta/i.test(version);

            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: `Release ${version}`,
              body: notes,
              draft: false,
              prerelease: isPrerelease
            });
